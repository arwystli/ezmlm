<?php

/**
 * @file
 * Allows users to subscribe to EZMLM mailing lists via a form in
 * a block or page.  List of mailing lists is defined by adminstrator.
 * Module sends subscription requests to each list's subscribe address.
 */

/**
 * Implementation of hook_user().
 * by mjs2020
 * this adds the ability to subscribe to mailing lists
 * during the registration process.
 */
function ezmlm_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'register':
      if (variable_get('ezmlm_register', 0) && variable_get('ezmlm_register_list', 0)) {
        $listsform = ezmlm_subscribe_form('', 'REG', variable_get('ezmlm_reg_display', 'email'));
        unset($listsform['ezmlm_email'], $listsform['submit'], $listsform['subscribe'] );

        $form['ezmlm'] = array(
          "#type" => "fieldset",
          "#title" => t("Mailing lists"),
          "#description" => t("Please select the mailing lists you would like to subscribe to."),
          '#collapsible' => FALSE,
          "#tree" => FALSE,
          "#parents" => array("ezmlm"),
        );
        $form['ezmlm']['ezmlm_subscribe'] = array();
        foreach ($listsform['ezmlm_subscribe'] as $key => $ezmlm_list) {
          $ezmlm_list['#parents'][0] = $key;
          $ezmlm_list['#name'] = $key;
          $form['ezmlm']['ezmlm_subscribe'][$key] = $ezmlm_list;
        }
        return $form;
      }
      break;
    case 'insert':
      if (variable_get('ezmlm_register', 0) && variable_get('ezmlm_register_list', 0)) {
        $lists = _ezmlm_get_lists('REG');
        $listct = _ezmlm_get_count('REG');
        $arr = array();
        // get the selected mailing list addresses
        for ($ct=1; $ct <= $listct; $ct++) {
          if (isset($edit["ezmlm_list_$ct"])) {
            $address = $edit["ezmlm_list_$ct"];
            if ($address && in_array($address, $lists)) {
              $arr[] = $address;
            }
          }
        }
        $email = trim($edit['mail']);
        $ret = _ezmlm_subscribe_process($arr, $email);
        if (is_array($ret)) {
          $output = (t('Please check your mail at %mail to confirm registration of:', array('%mail' => $email)));
          drupal_set_message($output ."<br />". implode('<br />', $ret));
        }
        else {
          drupal_set_message($ret, 'error');
        }
      }
      break;
  }
}

/**
 * Implementation of hook_help().
 */
function ezmlm_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Utilities related to ezmlm, such as a box for subscribing to list(s).');
  }
}

/**
 * Implementation of hook_link().
 */
function ezmlm_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();
  if ($type == 'page' && user_access('access content')) {
    $links[] = l(t('mailing %list', array('%list' => format_plural(_ezmlm_get_count(), 'list', 'lists'))), 'ezmlm', array('title' => t('Subscribe to mailing %list', array('%list' => format_plural(_ezmlm_get_count(), 'list', 'lists')))));
  }
  return $links;
}

/**
 * Implementation of hook_perm().
 */
function ezmlm_perm() {
  return array('administer ezmlm');
}

/**
 * Implementation of hook_menu().
 */
function ezmlm_menu() {
  $items['ezmlm/add'] = array(
    'title' => 'Mailing lists',
    'page callback' => 'ezmlm_block',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['ezmlm'] = array(
    'title' => 'Mailing lists',
    'page callback' => 'ezmlm_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/ezmlm'] = array(
    'title' => 'Ezmlm lists',
    'description' => 'Ezmlm mailing lists management.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ezmlm_admin_settings'),
    'access arguments' => array('administer ezmlm'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ezmlm.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_block().
 *
 * Generates a block with the subscription form.
 */

function ezmlm_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('ezmlm subscribe to list(s)');
      return $blocks;
    case 'view':
      if (arg(0) != 'ezmlm') {
        switch ($delta) {
          case 0:
            $block = "";
            if (count(variable_get('ezmlmmailinglists', ''))) {
              $display = variable_get('ezmlm_block_display', 'email');
              $form = drupal_get_form('ezmlm_subscribe_form', 'DEFAULT', $display, 'block');
              $block['subject'] = variable_get('ezmlm_block_title', t('Subscriptions'));
              $block['content'] .= theme('ezmlm_subscribe_page', $form, 'block');
            }
            return $block;
        }
      }
      break;
    case 'configure':
    case 'save':
      return;
  }
}

/**
 * Generates the subscription form.
 *
 * @return
 *  HTML form.
 */
function ezmlm_subscribe_form($form_state, $type = 'DEFAULT', $display = 'email', $region = 'page') {
  global $user;

  if (_ezmlm_get_count($type)) {
    $lists = _ezmlm_get_lists($type);
    $form['subscribe'] = array(
      '#type' => 'markup',
      '#value' => variable_get('ezmlm_title', t('Mailing lists')),
    );
    $ct = 1;
    foreach ($lists as $list_text => $list_email) {
      $list_email = trim($list_email);
      $form['ezmlm_subscribe']["ezmlm_list_$ct"] = array(
        '#type' => 'checkbox',
        '#title' => ($display=='name' ? $list_text : $list_email),
        '#return_value' => $list_email,
      );
      $ct++;
    }
    $form['ezmlm_email'] = array(
      '#type' => 'textfield',
      '#title' => t('Your email address'),
      '#default_value' => ($user->mail ? $user->mail : ''),
      '#size' => 20,
      '#maxlength' => 80,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Subscribe')
    );
    $form['region'] = array(
      '#type' => 'value',
      '#value' => $region
    );
  }
  else {
    $form['subscribe'] = array(
      '#type' => 'markup',
      '#value' => 'There are no lists available for subscription.',
    );
  }
  return $form;
}

/**
 * Validate form
 */
function ezmlm_subscribe_form_validate($form, &$form_state) {
  $arr = array();
  $lists = _ezmlm_get_lists();
  $ct = 1;
  foreach ($form_state['values'] as $key => $address) {
    $address = trim($address);
    if ($key == "ezmlm_list_$ct" && $address && in_array($address, $lists)) {
      $arr[] = $address;
    }
    $ct++;
  }
  if (count($arr) < 1) {
      form_set_error('', t('No lists selected!'));
  }
  if ( $error = user_validate_mail($form_state['values']['ezmlm_email'])) {
    form_set_error('ezmlm_email', $error);
  }
}

/**
 * Submit form
 */
function ezmlm_subscribe_form_submit($form, &$form_state) {
  $lists = _ezmlm_get_lists();
  $arr = array();
  $ct = 1;
  // get the selected mailing list addresses
  foreach ($form_state['values'] as $key => $address) {
    $address = trim($address);
    if ($key == "ezmlm_list_$ct" && $address && in_array($address, $lists)) {
      $arr[] = $address;
    }
    $ct++;
  }
  $email = trim($form_state['values']['ezmlm_email']);
  $ret = _ezmlm_subscribe_process($arr, $email);
  if ( is_array($ret)) {
    $output = (t('Please check your mail at %mail to confirm registration of:', array('%mail' => $email)));
    drupal_set_message($output ."<br />". implode('<br />', $ret));
  }
  else {
    drupal_set_message($ret, 'error');
  }
}

// internal functions
/**
 * Menu callback; presents the subscription form on a page, or processes
 * that form's input, whether from block or page.
 */
function ezmlm_page($display = FALSE) {
  if (! $display) {
    $display = variable_get('ezmlm_display', 'email');
  }
  $form = drupal_get_form('ezmlm_subscribe_form', 'DEFAULT', $display, 'page');
  return theme('ezmlm_subscribe_page', $form, 'page');
}

/**
 * Process the subscription form input; does some address checks and
 * sends mail to the EZMLM subscribe addresses for the lists.
 */
function _ezmlm_subscribe_process($subs, $mail) {
  $err = "";
  list($user_name, $user_domain) = explode('@', $mail);
  $lists = _ezmlm_get_lists();
  $mylists = array();
  // loop over the lists
  foreach ($lists as $list_text => $list_email) {
    // loop over the subs
    foreach ($subs as $address) {
      if ($list_email == $address) {
        list($list_name, $list_domain) =  explode('@', $list_email);
        // subscribe address for list formatted below
        $to = trim($list_name) .'-subscribe-'. trim($user_name) .'='. trim($user_domain) .'@'. trim($list_domain);
        $lang = language_default();
        drupal_mail('ezmlm', 'subscribe', $to, $lang);
        // mail($to, '', '');
        $mylists[] = trim($list_email);
      }
    }
  }
  return $mylists;
}

/**
 * Implementation of hook_mail().
 */
function ezmlm_mail($key, &$message, $params) {
  switch($key) {
    case 'subscribe':
      $message['subject'] = '';
      $message['body'][] = '';
    break;
  }
}

/**
 * Return current number of lists.
 * Use this instead of count(_ezmlm_get_lists()) because non-array counts as 1.
 */
function _ezmlm_get_count($type='DEFAULT') {
  $lists = _ezmlm_get_lists($type);
  if (!is_array($lists)) {
    return 0;
  }
  else {
    return count($lists);
  }
}

/**
 * Return array of current mailing lists.
 */
function _ezmlm_get_lists($type='DEFAULT') {
  if (is_array($type)) {
    $type = 'DEFAULT';
  }
  if ($type=='DEFAULT') {
    return variable_get('ezmlmmailinglists', '');
  }
  elseif ($type=='REG') {
    return variable_get('ezmlm_register_list', '');
  }
}

/**
 * Implementation of hook_theme().
 */
function ezmlm_theme() {
  return array(
    'ezmlm_subscribe_page' => array(
      'arguments' => array(
        'form' => NULL,
        'type' => '',
      ),
    ),
    'ezmlm_subscribe_form' => array(
      'arguments' => array(
        'form' => NULL
      ),
    ),
  );
}

function theme_ezmlm_subscribe_page($form, $type = 'page') {
  switch ($type) {
    case 'block':
      $output = $form;
    break;
    case 'page':
      $output = $form;
    break;
  }
  return $output;
}

function theme_ezmlm_subscribe_form($form) {
  $output = '';
  $output .= drupal_render($form);
  return $output;
}
